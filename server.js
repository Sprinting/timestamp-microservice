 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var router = express.Router();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

// app.route('/_api/package.json')
//   .get(function(req, res, next) {
//     console.log('requested');
//     fs.readFile(__dirname + '/package.json', function(err, data) {
//       if(err) return next(err);
//       res.type('txt').send(data.toString());
//     });
//   });
 
app.set("views",__dirname+"/views")
app.set("view engine","pug")
app.route('/')
    .get(function(req, res) {
  const template_values = {
    "example":
      {"input":[req.headers.host+decodeURI("/api/timestamp/December%2015,%202015"),req.headers.host+"/api/timestamp/1450137600"],
      "output":[JSON.stringify({ "unix": 1450137600, "natural": "December 15, 2015" })]}
  }
  // var t = {"1":"1"}
		  res.render("index",template_values)
    })

router.use('/api/timestamp/:date',function(req,res,next){
  res.header('Content-Type','application/json')
  /*
  Dont really need this was just for experimenting with middleware
  move the code to a single function
  */
  // res.header('X-JSON-MIDDLEWARE',1)
  const valid_date = new Date(+req.params.date).getTime()||new Date(decodeURI(req.params.date)).getTime()
  res.header('x-request-params',req.params.date)
  res.header('x-date-valid',valid_date)
  res.locals.valid_date=false;
  if(valid_date>0)
  {
    res.locals.valid_date=true
    res.header('x-parseable-date',1)
    res.locals.unix_timestamp = valid_date
  }
  else
  {
      res.header('x-parseable-date',0)
  }
next()  

})

function date(timestamp)
  {
    const date = new Date(timestamp)
    const months = [
    "January",
    "Februray",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ]
    return months[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear()
}

router.get('/api/timestamp',function(req,res){
  const now = new Date()
  return res.json({
    "unix" : now.getTime(),
    "utc" : now.toUTCString(),
    "natural" : date(now.getTime())
  })
})
router.get('/api/timestamp/:date',function(req,res){
  
  if(res.locals.valid_date)
  {
           res.json({
    "unix":res.locals.unix_timestamp,
    "natural":date(res.locals.unix_timestamp),
    "utc":new Date(res.locals.unix_timestamp).toUTCString()
    })     
  }
  else
    {
      // res.writeHead(400, { "Content-Type": "text/plain" })
      res.json({
        "unix":null,
        "natural":null,
        "error":"Invalid Date"
      })
    }
 
})
app.use('/', router)

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});


// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

